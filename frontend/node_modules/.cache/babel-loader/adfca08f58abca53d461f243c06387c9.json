{"ast":null,"code":"var _jsxFileName = \"/Users/sangnguyen/Documents/nodejs/Asm/frontend/src/components/browse/MovieList.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from '../../utils/axios';\nimport movieTrailer from 'movie-trailer';\nimport MovieDetail from '../../components/browse/MovieDetail';\nimport './MovieList.css';\nconst base_url = 'https://image.tmdb.org/t/p/original';\nconst movies_limit = 10;\n\nfunction MovieList({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = movie => {\n    if (selectedMovie && selectedMovie.id === movie.id) {\n      setSelectedMovie(null);\n      setTrailerUrl('');\n    } else {\n      setSelectedMovie(movie);\n      setTrailerUrl(`https://www.youtube.com/watch?v=`);\n    }\n  }; // setSelectedMovie(movie);\n  // \t\tconst data = {\n  // \t\t\tmovieId: movie.id\n  // \t\t}\n  // \t\tconst post = async () => {\n  // \t\t\tawait fetch(`http://localhost:5500/api/movies/video`, {\n  // \t\t\t\tmethod: 'POST',\n  // \t\t\t\tbody: JSON.stringify(data),\n  // \t\t\t\theaders: {\n  // \t\t\t\t\t\"Content-Type\": \"application/json\"\n  // \t\t\t\t}\n  // \t\t\t})\n  // \t\t\t.then(res => res.json())\n  // \t\t\t.then(data => {\n  // \t\t\t\t\tconsole.log(data);\n  // \t\t\t\t// setSelectedMovie(data[0]);\n  // \t\t\t\t// console.log(typeof data[0].key);\n  // \t\t\t\tsetTrailerUrl(`https://www.youtube.com/watch?v=${data[0].key}`);\n  // \t\t\t})\n  // \t\t\t.catch(err => console.log(err));\n  // \t\t}\n  // \t\tpost();\n  // movies.sort((a, b) => b.popularity - a.popularity);\n  // movies.splice(movies_limit);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"movie-list-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters sc2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }\n  }, movies.map(movie => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: movie.id,\n      onClick: () => handleClick(movie),\n      className: `row_poster ${isLargeRow && 'row_posterLarge'}`,\n      src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n      alt: movie.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '40px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }\n  }, selectedMovie && /*#__PURE__*/React.createElement(MovieDetail, {\n    movieData: selectedMovie,\n    movieTrailer: trailerUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 23\n    }\n  })));\n}\n\nexport default MovieList;","map":{"version":3,"sources":["/Users/sangnguyen/Documents/nodejs/Asm/frontend/src/components/browse/MovieList.jsx"],"names":["React","useState","useEffect","axios","movieTrailer","MovieDetail","base_url","movies_limit","MovieList","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","selectedMovie","setSelectedMovie","fetchData","request","get","data","results","handleClick","movie","id","map","poster_path","backdrop_path","name","padding"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAO,iBAAP;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;AACA,MAAMC,YAAY,GAAG,EAArB;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAnB,EAAoD;AACnD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,IAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACf,mBAAegB,SAAf,GAA2B;AAC1B,YAAMC,OAAO,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAUV,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACM,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACA;;AACDD,IAAAA,SAAS;AACT,GAPQ,EAON,CAACR,QAAD,CAPM,CAAT;;AASA,QAAMa,WAAW,GAAIC,KAAD,IAAW;AAC9B,QAAIR,aAAa,IAAIA,aAAa,CAACS,EAAd,KAAqBD,KAAK,CAACC,EAAhD,EAAoD;AACnDR,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,MAAAA,aAAa,CAAC,EAAD,CAAb;AACA,KAHD,MAGO;AACNE,MAAAA,gBAAgB,CAACO,KAAD,CAAhB;AACAT,MAAAA,aAAa,CAAE,kCAAF,CAAb;AACA;AACD,GARD,CAdmD,CAwBnD;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;AAEA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCN,KAAlC,CADD,eAEC;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEG,MAAM,CAACc,GAAP,CAAYF,KAAD,IAAW;AACtB,wBACC;AACC,MAAA,GAAG,EAAEA,KAAK,CAACC,EADZ;AAEC,MAAA,OAAO,EAAE,MAAMF,WAAW,CAACC,KAAD,CAF3B;AAGC,MAAA,SAAS,EAAG,cAAab,UAAU,IAAI,iBAAkB,EAH1D;AAIC,MAAA,GAAG,EAAG,GAAEL,QAAS,GAChBK,UAAU,GAAGa,KAAK,CAACG,WAAT,GAAuBH,KAAK,CAACI,aACvC,EANF;AAOC,MAAA,GAAG,EAAEJ,KAAK,CAACK,IAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAWA,GAZA,CADF,CAFD,eAiBC;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEd,aAAa,iBAAI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEA,aAAxB;AAAuC,IAAA,YAAY,EAAEF,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADnB,CAjBD,CADD;AAuBA;;AAED,eAAeN,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from '../../utils/axios';\nimport movieTrailer from 'movie-trailer';\nimport MovieDetail from '../../components/browse/MovieDetail';\nimport './MovieList.css';\n\nconst base_url = 'https://image.tmdb.org/t/p/original';\nconst movies_limit = 10;\n\nfunction MovieList({ title, fetchUrl, isLargeRow }) {\n\tconst [movies, setMovies] = useState([]);\n\tconst [trailerUrl, setTrailerUrl] = useState('');\n\tconst [selectedMovie, setSelectedMovie] = useState(null);\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst request = await axios.get(fetchUrl);\n\t\t\tsetMovies(request.data.results);\n\t\t\treturn request;\n\t\t}\n\t\tfetchData();\n\t}, [fetchUrl]);\n\n\tconst handleClick = (movie) => {\n\t\tif (selectedMovie && selectedMovie.id === movie.id) {\n\t\t\tsetSelectedMovie(null);\n\t\t\tsetTrailerUrl('');\n\t\t} else {\n\t\t\tsetSelectedMovie(movie);\n\t\t\tsetTrailerUrl(`https://www.youtube.com/watch?v=`)\n\t\t}\n\t};\n\n\t// setSelectedMovie(movie);\n\t\t\t\n\t// \t\tconst data = {\n\t// \t\t\tmovieId: movie.id\n\t// \t\t}\n\n\t// \t\tconst post = async () => {\n\t// \t\t\tawait fetch(`http://localhost:5500/api/movies/video`, {\n\t// \t\t\t\tmethod: 'POST',\n\t// \t\t\t\tbody: JSON.stringify(data),\n\t// \t\t\t\theaders: {\n\t// \t\t\t\t\t\"Content-Type\": \"application/json\"\n\t// \t\t\t\t}\n\t// \t\t\t})\n\t// \t\t\t.then(res => res.json())\n\t// \t\t\t.then(data => {\n\t// \t\t\t\t\tconsole.log(data);\n\t// \t\t\t\t// setSelectedMovie(data[0]);\n\t// \t\t\t\t// console.log(typeof data[0].key);\n\t// \t\t\t\tsetTrailerUrl(`https://www.youtube.com/watch?v=${data[0].key}`);\n\t// \t\t\t})\n\t// \t\t\t.catch(err => console.log(err));\n\t// \t\t}\n\n\t// \t\tpost();\n\n\t// movies.sort((a, b) => b.popularity - a.popularity);\n\t// movies.splice(movies_limit);\n\n\treturn (\n\t\t<div className='row'>\n\t\t\t<h2 className=\"movie-list-title\">{title}</h2>\n\t\t\t<div className='row_posters sc2'>\n\t\t\t\t{movies.map((movie) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\t\tonClick={() => handleClick(movie)}\n\t\t\t\t\t\t\tclassName={`row_poster ${isLargeRow && 'row_posterLarge'}`}\n\t\t\t\t\t\t\tsrc={`${base_url}${\n\t\t\t\t\t\t\t\tisLargeRow ? movie.poster_path : movie.backdrop_path\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\talt={movie.name}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<div style={{ padding: '40px' }}>\n\t\t\t\t{selectedMovie && <MovieDetail movieData={selectedMovie} movieTrailer={trailerUrl} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}